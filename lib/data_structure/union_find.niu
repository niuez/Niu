import "std/vec.niu"
import "std/u64.niu"

struct UnionFind {
  par: Vec<u64>,
  sz: Vec<u64>,
  N: u64,
} {
  fn init(N: u64) -> Self {
    let mut par = Vec::new();
    let mut sz = Vec::new();
    for i = 0; i < N; i = i + 1 {
      par.push(N);
      sz.push(1);
    }
    UnionFind { par: par, sz: sz, N: N, }
  }
  fn root(self: &mut Self, x: u64) -> u64 {
    if self.par[x] == self.N {
      x
    }
    else {
      let r = self.root(self.par[x]);
      self.par[x] = r;
      r
    }
  }
  fn size(self: &mut Self, x: u64) -> u64 {
    self.sz[self.root(x)]
  }
  fn unite(self: &mut Self, x: u64, y: u64) -> void {
    let xr = self.root(x);
    let yr = self.root(y);
    if xr != yr {
      let xs = self.size(xr);
      let ys = self.size(yr);
      if xs < ys {
        self.sz[yr] = ys + xs;
        self.par[xr] = yr;
      }
      else {
        self.sz[xr] = ys + xs;
        self.par[yr] = xr;
      }
    }
  }
}

testfn(library-checker-problems:datastructure/unionfind) unionfind_test $${
  std::cin.tie(nullptr);
  int N, Q;
  std::cin >> N >> Q;
  UnionFind uf = UnionFind::init(N);
  while(Q--) {
    int t, a, b;
    std::cin >> t >> a >> b;
    if(t == 0) {
      UnionFind::unite(uf, a, b);
    }
    else {
      std::cout << (UnionFind::root(uf, a) == UnionFind::root(uf, b)) << "\n";
    }
  }
}$$
