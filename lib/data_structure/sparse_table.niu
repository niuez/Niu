import "std/opes.niu"
import "std/u64.niu"
import "std/vec.niu"

trait Band {
  fn ope(self: &Self, right: &Self) -> Self;
}

fn __lg(n: u64) -> u64 $${63 - __builtin_clzll($arg(n))}$$

struct SparseTable<T> where T: Band {
  table: Vec<Vec<T>>,
  n: u64,
} {
  fn init(arr: Vec<T>) -> Self {
    let n = arr.len();
    let mut table = Vec::new();
    table.push(arr);
    for k = 1; (1 << k) <= n; k = k + 1 {
      let mut t = Vec::new();
      for i = 0; i + (1 << k) <= n; i = i + 1 {
        t.push(table[k - 1][i].ope(&table[k - 1][i + (1 << (k - 1))]));
      }
      table.push(t);
    }
    SparseTable { table: table, n: n }
  }
  fn query(self: &Self, s: u64, t: u64) -> T {
    let k = __lg(t - s);
    self.table[k][s].ope(&self.table[k][t - (1 << k)])
  }
}

testfn(library-checker-problems:datastructure/staticrmq) sparse_table_staticrmq $${
#include <iostream>
using u64 = unsigned int long long;
template<>
struct Band<u64, void>: std::true_type {
  static u64 ope(const u64& a, const u64& b) {
    return std::min(a, b);
  }
};
int main() {
  std::cin.tie(nullptr);
  int N, Q;
  std::cin >> N >> Q;
  std::vector<u64> a(N);
  for(int i = 0; i < N; i++) {
    std::cin >> a[i];
  }
  using ST = SparseTable<u64>;
  auto st = ST::init(std::move(a));
  while(Q--) {
    int l, r;
    std::cin >> l >> r;
    std::cout << ST::query(st, l, r) << '\n';
  }
}
}$$


