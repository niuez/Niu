#include <vector>
#include <algorithm>
import "std/opes.niu"

struct Vec<T> $${std::vector<$ty(T)>}$$ {
  fn new() -> Self $${std::vector<$ty(T)>()}$$
  fn init(N: u64, t: T) -> Self $${std::vector<$ty(T)>($arg(N), $arg(t))}$$
  fn push(self: &mut Self, t: T) -> void $${$arg(self).push_back($arg(t))}$$
  fn len(self: &Self) -> u64 $${$arg(self).size()}$$
  fn pop(self: &mut Self) -> void $${$arg(self).pop_back()}$$
  fn sort(self: &mut Self) -> void where T: Ord $${std::sort($arg(self).begin(), $arg(self).end())}$$
}

impl<T> Clone for Vec<T> where T: Clone {
  fn clone(self: &Self) -> Self $${(std::vector<$ty(T)>($arg(self)))}$$
}

impl<T> Index for Vec<T> {
  type Output = T;
  type Arg = u64;
  fn index(self: &Self, i: u64) -> &T $${$arg(self).at($arg(i))}$$
}

impl<T> IndexMut for Vec<T> {
  fn index_mut(self: &mut Self, i: u64) -> &mut T $${$arg(self).at($arg(i))}$$
}

impl<T> Eq for Vec<T> where T: Eq {
  fn eq(self: &Self, right: &Self) -> bool $${self==right}$$
}

impl<T> Iterator for Vec<T> {
  type Item = T;
}

impl<T> Iterator for &Vec<T> {
  type Item = &T;
}

impl<T> Iterator for &mut Vec<T> {
  type Item = &mut T;
}
