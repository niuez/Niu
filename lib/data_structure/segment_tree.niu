import "std/vec.niu"
import "std/u64.niu"
import "std/i64.niu"

trait Monoid {
  fn ide() -> Self;
  fn ope(self: &Self, right: &Self) -> Self;
}

struct SegmentTree<T> where T: Monoid {
  node: Vec<T>,
  n: u64,
} {
  fn init(arr: Vec<T>) -> Self {
    let mut n = 1;
    for i = 1; n < arr.len(); n = n * 2 {}
    let mut node = Vec::init(2 * n, T#Monoid::ide());
    let mut j = 0;
    for x in arr {
      node[j + n] = x;
      j = j + 1;
    }
    for i = n - 1; i >= 1; i = i - 1 {
      node[i] = node[i * 2].ope(&node[i * 2 + 1]);
    }
    SegmentTree { node: node, n: n, }
  }

  fn get(self: &Self, i: u64) -> &T {
    &self.node[i + self.n]
  }

  fn update(self: &mut Self, p: u64, x: T) -> void {
    self.node[p + self.n] = x;
    for i = (p + self.n) / 2; i >= 1; i = i / 2 {
      self.node[i] = self.node[i * 2].ope(&self.node[i * 2 + 1]);
    }
  }

  fn sum(self: &mut Self, l: u64, r: u64) -> T {
    let mut lx = T#Monoid::ide();
    let mut rx = T#Monoid::ide();
    let mut i = l + self.n;
    for j = r + self.n; i < j; j = j >> 1 {
      if (i & 1) == 1 {
        lx = lx.ope(&self.node[i]);
        i = i + 1;
      }
      if (j & 1) == 1 {
        j = j - 1;
        rx = self.node[j].ope(&rx);
      }
      i = i >> 1;
    }
    lx.ope(&rx)
  }
}
