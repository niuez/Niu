import "segment_tree.niu"
import "math/modint.niu"

struct Am {
  v: i64,
} {
  fn init(v: i64) -> Am {
    Am { v: v }
  }
}

impl Clone for Am {
  fn clone(self: &Self) -> Self { Am { v: self.v } }
}
impl Copy for Am {}

impl Monoid for Am {
  fn ide() -> Am { Am::init(0i64) }
  fn ope(self: &Am, right: &Am) -> Am {
    Am::init(self.v + right.v)
  }
}

struct Fm {
  a: Modint<M9982>,
  b: Modint<M9982>,
} {
  fn init(a: u64, b: u64) -> Fm {
    Fm { a: Modint::init(a), b: Modint::init(b) }
  }
}

impl Monoid for Fm {
  fn ide() -> Fm { Fm::init(1u64, 0u64) }
  fn ope(a: &Fm, b: &Fm) -> Fm {
    Fm { a: a.a * b.a, b: a.b * b.a + b.b }
  }
}

impl Clone for Fm {
  fn clone(self: &Self) -> Self { Fm { a: self.a, b: self.b } }
}
impl Copy for Fm {}


testfn(library-checker-problems:datastructure/point_add_range_sum) segmenttree_point_add_range_sum $${
  std::cin.tie(nullptr);
  int N, Q;
  std::cin >> N >> Q;
  std::vector<Am> a(N, Am::init(0));
  for(int i = 0; i < N; i++) {
    long long v;
    std::cin >> v;
    a[i] = Am::init(v);
  }
  using Seg = SegmentTree<Am>;
  auto seg = Seg::init(std::move(a));
  while(Q--) {
    int t, a, b;
    std::cin >> t >> a >> b;
    if(t == 0) {
      Seg::update(seg, a, Am::init(Seg::get(seg, a).v + b));
    }
    else {
      std::cout << Seg::sum(seg, a, b).v << '\n';
    }
  }
}$$

testfn(library-checker-problems:datastructure/point_set_range_composite) segmenttree_point_set_range_composite $${
  std::cin.tie(nullptr);
  int N, Q;
  std::cin >> N >> Q;
  std::vector<Fm> a(N, Fm::init(1, 0));
  for(int i = 0; i < N; i++) {
    long long v, w;
    std::cin >> v >> w;
    a[i] = Fm::init(v, w);
  }
  using Seg = SegmentTree<Fm>;
  auto seg = Seg::init(std::move(a));
  while(Q--) {
    int t, a, b, c;
    std::cin >> t >> a >> b >> c;
    if(t == 0) {
      Seg::update(seg, a, Fm::init(b, c));
    }
    else {
      Fm ans = Seg::sum(seg, a, b);
      std::cout << (ans.a * Modint<M9982>(c) + ans.b).a << '\n';
    }
  }
}$$


