import "opes.niu"

impl Add<f64> for f64 {
  type Output = f64;
  fn add(a: Self, b: f64) -> f64 $${a + b}$$
}
impl Sub<f64> for f64 {
  type Output = f64;
  fn sub(a: Self, b: f64) -> f64 $${a - b}$$
}
impl Mul<f64> for f64 {
  type Output = f64;
  fn mul(a: Self, b: f64) -> f64 $${a * b}$$
}
impl Div<f64> for f64 {
  type Output = f64;
  fn div(a: Self, b: f64) -> f64 $${a / b}$$
}
impl Eq for f64 {
  fn eq(a: &f64, b: &f64) -> bool $${a == b}$$
}
impl Ord for f64 {
  fn le(a: &f64, b: &f64) -> bool $${a < b}$$
}
impl Clone for f64 { fn clone(a: &Self) -> Self $${a}$$ }
impl Copy for f64 {}
