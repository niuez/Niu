import "std/vec.niu"
import "std/opes.niu"
import "std/u64.niu"


trait Field where
  Self: Add<Self>(Output=Self),
  Self: Sub<Self>(Output=Self),
  Self: Mul<Self>(Output=Self),
  Self: Copy {
  fn zero() -> Self;
  fn one() -> Self;
}

struct Matrix<F> where F: Field
{
  a: Vec<Vec<F>>,
  h: u64,
  w: u64,
}
{
  fn zero(h: u64, w: u64) -> Self {
    Matrix {
      a: Vec::init(h, Vec::init(w, F::zero())),
      h: h,
      w: w,
    }
  }
  fn one(h: u64) -> Self {
    let mut a = Vec::init(h, Vec::init(h, F::zero()));
    for(let mut i = 0;i < h;i = i + 1) {
      a[i][i] = F::one();
    }
    Matrix {
      a: a,
      h: h,
      w: h,
    }
  }
  fn pow(self: &Self, p: u64) -> Self {
    let mut now = self.clone();
    let mut ans = Matrix::one(self.h);
    for(let mut exp = p; exp > 0; exp = exp >> 1) {
      if exp & 1 == 1 {
        ans = &ans * &now;
      }
      now = &now * &now;
    }
    ans
  }
}

impl<F> Index for Matrix<F> where
  F: Field {
  type Arg = u64;
  type Output = Vec<F>;
  fn index(self: &Self, i: u64) -> &Vec<F> {
    &self.a[i]
  }
}

impl<F> IndexMut for Matrix<F> where
  F: Field {
  fn index_mut(self: &mut Self, i: u64) -> &mut Vec<F> {
    &mut self.a[i]
  }
}

impl<F> Add<Matrix<F>> for Matrix<F> where
  F: Field {
  type Output = Self;
  fn add(mut self: Self, right: Self) -> Self {
    for(let mut i = 0; i < self.h; i = i + 1) {
      for(let mut j = 0; j < self.w; j = j + 1) {
        self[i][j] = self[i][j] + right[i][j];
      }
    }
    self
  }
}

impl<F> Sub<Matrix<F>> for Matrix<F> where
  F: Field {
  type Output = Self;
  fn sub(mut self: Self, right: Self) -> Self {
    for(let mut i = 0; i < self.h; i = i + 1) {
      for(let mut j = 0; j < self.w; j = j + 1) {
        self[i][j] = self[i][j] - right[i][j];
      }
    }
    self
  }
}

impl<F> Mul<&Matrix<F>> for &Matrix<F> where
  F: Field {
  type Output = Matrix<F>;
  fn mul(self: &Matrix<F>, right: &Matrix<F>) -> Matrix<F> {
    let mut out = Matrix<F>::zero(self.h, right.w);
    for(let mut i = 0; i < self.h; i = i + 1) {
      for(let mut k = 0; k < right.w; k = k + 1) {
        for(let mut j = 0; j < self.w; j = j + 1) {
          out[i][k] = out[i][k] + self[i][j] * right[j][k];
        }
      }
    }
    out
  }
}

impl<F> Clone for Matrix<F> where F: Field {
  fn clone(self: &Self) -> Self {
    Matrix { a: self.a.clone(), h: self.h, w: self.w }
  }
}
